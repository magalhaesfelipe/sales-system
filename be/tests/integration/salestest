import request from "supertest";
import app from "../../src/app.js"; // Points to the Express app
import { signToken } from "../../src/controllers/authController.js";
import User from "../../src/models/userModel.js";
import Client from "../../src/models/clientModel.js";
import Sale from "../../src/models/saleModel.js";
import { afterAll, expect, jest } from "@jest/globals";
import mongoose from "mongoose";
import dotenv from "dotenv";
import { cnpj } from "cpf-cnpj-validator";

jest.setTimeout(10000);
dotenv.config();
const DATABASE = process.env.DATABASE;

describe("Sales API", () => {
  let token;
  let testUser;
  let saleId;
  let testClientId;

  beforeAll(async () => {
    try {
      // 1. CONNECT TO THE DATABASE
      await mongoose.connect(DATABASE);
      console.log("Database connected.");

      // 2. CREATE USER | GENERATE TOKEN
      testUser = await User.findOne({ email: "test@example.com" });
      if (!testUser) {
        testUser = await User.create({
          name: "Test User",
          email: "test@example.com",
          password: "123456789",
          passwordConfirm: "123456789",
        });
      }
      token = signToken(testUser._id);

      if (!token) {
        throw new Error("Token generation failed!");
      }

      console.log("Generated Token:", token);

      // 3. CREATE CLIENT

      // generate unique cpf/cnpj
      const validCnpj = cnpj.generate();

      const newClientData = {
        name: "Test Client",
        cpfCnpj: validCnpj, // Ensure it is unique
        phone: "11987654321",
        email: "bancossafra@gmail.com",
        birthDate: "1985-07-15",
        type: "pessoa-juridica",
        cep: "01310-930",
      };

      const clientResponse = await request(app)
        .post("/api/clientes")
        .set("Authorization", `Bearer ${token}`)
        .send(newClientData);

      if (clientResponse.status !== 201) {
        throw new Error(
          `Failed to create client: ${clientResponse.body.message}`
        );
      }

      testClientId = clientResponse.body.data._id;
    } catch (error) {
      console.error("Error in beforeAll:", error);
      throw error;
    }
  });

  // *TESTS*

  // POST /vendas
  test("POST /vendas should return a new sale document", async () => {
    const newSaleData = {
      client: testClientId,
      date: "2025-01-20T12:34:56.789Z",
      shoppingCart: [
        {
          plan: "67acd0e44c68edbe83a6805b",
          services: ["67ab81793dc3204b83940d66", "67aba3d66b9a4054d351aee3"],
        },
      ],
      discount: 5.0,
    };

    const saleResponse = await request(app)
      .post("/api/vendas")
      .set("Authorization", `Bearer ${token}`)
      .send(newSaleData);

    // Check if the sale was created successfully
    expect(saleResponse.status).toBe(201);
    expect(saleResponse.body).toHaveProperty("_id");
    saleId = saleResponse.body.data._id; // Store the ID for later use
    console.log("SALE ID:", saleId);
  });

  // GET /vendas
  test("GET /vendas should return a list of sales", async () => {
    const response = await request(app)
      .get("/api/vendas")
      .set("Authorization", `Bearer ${token}`); // Set the token in the header

    expect(response.status).toBe(200);
    expect(Array.isArray(response.body.results.data)).toBe(true);
  });

  test("GET /vendas should return 401 without token", async () => {
    const response = await request(app).get("/api/vendas");
    expect(response.status).toBe(401);
  });

  test("GET /vendas should return 401 with invalid token", async () => {
    const response = await request(app)
      .get("/api/vendas")
      .set("Authorization", `Bearer invalidtoken`);

    expect(response.status).toBe(401);
  });

  // GET /vendas/:id
  test("GET /vendas/:id should return a sale by ID", async () => {
    const response = await request(app)
      .get(`/api/vendas/${saleId}`)
      .set("Authorization", `Bearer ${token}`);

    expect(response.status).toBe(200);
    expect(response.body.data).toHaveProperty("_id");
  });

  // PUT /vendas

  // DELETE /vendas

  // CLEAN UP
  afterAll(async () => {
    console.log("Cleaning up after all tests...");

    // await User.findByIdAndDelete(testUser._id);
    // await Client.findByIdAndDelete(testClientId);
    // await Sale.findByIdAndDelete(saleId);
    await mongoose.connection.close();
  });
});
